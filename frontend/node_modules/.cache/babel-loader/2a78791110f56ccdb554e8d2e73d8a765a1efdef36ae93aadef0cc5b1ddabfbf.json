{"ast":null,"code":"var _jsxFileName = \"/home/utkarsh/smart frontend/frontend/frontend/src/DeviceManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client'; // Import Socket.IO\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeviceManager = () => {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [deviceType, setDeviceType] = useState('');\n  const [deviceStatus, setDeviceStatus] = useState('');\n  const socket = io('http://localhost:3000'); // Connect to Socket.IO server\n\n  // Fetch devices from the backend\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/devices'); // Correct port\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch devices on component mount\n    fetchDevices();\n\n    // Listen for real-time device status updates\n    socket.on('deviceStatusUpdated', updatedDevice => {\n      setDevices(prevDevices => prevDevices.map(device => device._id === updatedDevice._id ? updatedDevice : device));\n    });\n\n    // Cleanup the socket connection on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n\n  // Add a new device\n  const addDevice = async () => {\n    try {\n      const response = await axios.post('http://localhost:3000/devices', {\n        type: deviceType,\n        status: deviceStatus\n      });\n      setDevices([...devices, response.data]);\n      setDeviceType('');\n      setDeviceStatus('');\n\n      // Emit the new device status to all connected clients\n      socket.emit('deviceStatusChanged', response.data);\n    } catch (error) {\n      console.error('Error adding device:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Device Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Device Type\",\n      value: deviceType,\n      onChange: e => setDeviceType(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Device Status\",\n      value: deviceStatus,\n      onChange: e => setDeviceStatus(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addDevice,\n      children: \"Add Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Devices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [device.type, \" - \", device.status]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(DeviceManager, \"7ymadW8+Wb8CM8TIXGEaI1acrvc=\");\n_c = DeviceManager;\nexport default DeviceManager;\nvar _c;\n$RefreshReg$(_c, \"DeviceManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","io","jsxDEV","_jsxDEV","DeviceManager","_s","devices","setDevices","deviceType","setDeviceType","deviceStatus","setDeviceStatus","socket","fetchDevices","response","get","data","error","console","on","updatedDevice","prevDevices","map","device","_id","disconnect","addDevice","post","type","status","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/utkarsh/smart frontend/frontend/frontend/src/DeviceManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client'; // Import Socket.IO\n\nconst DeviceManager = () => {\n  const [devices, setDevices] = useState([]);\n  const [deviceType, setDeviceType] = useState('');\n  const [deviceStatus, setDeviceStatus] = useState('');\n  const socket = io('http://localhost:3000'); // Connect to Socket.IO server\n\n  // Fetch devices from the backend\n  const fetchDevices = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/devices'); // Correct port\n      setDevices(response.data);\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch devices on component mount\n    fetchDevices();\n\n    // Listen for real-time device status updates\n    socket.on('deviceStatusUpdated', (updatedDevice) => {\n      setDevices((prevDevices) =>\n        prevDevices.map((device) =>\n          device._id === updatedDevice._id ? updatedDevice : device\n        )\n      );\n    });\n\n    // Cleanup the socket connection on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n\n  // Add a new device\n  const addDevice = async () => {\n    try {\n      const response = await axios.post('http://localhost:3000/devices', {\n        type: deviceType,\n        status: deviceStatus,\n      });\n      setDevices([...devices, response.data]);\n      setDeviceType('');\n      setDeviceStatus('');\n\n      // Emit the new device status to all connected clients\n      socket.emit('deviceStatusChanged', response.data);\n    } catch (error) {\n      console.error('Error adding device:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Device Manager</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Device Type\"\n        value={deviceType}\n        onChange={(e) => setDeviceType(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Device Status\"\n        value={deviceStatus}\n        onChange={(e) => setDeviceStatus(e.target.value)}\n      />\n      <button onClick={addDevice}>Add Device</button>\n      <h2>Devices</h2>\n      <ul>\n        {devices.map((device) => (\n          <li key={device._id}>\n            {device.type} - {device.status}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DeviceManager;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMc,MAAM,GAAGX,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC;MACnER,UAAU,CAACO,QAAQ,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACAc,YAAY,CAAC,CAAC;;IAEd;IACAD,MAAM,CAACO,EAAE,CAAC,qBAAqB,EAAGC,aAAa,IAAK;MAClDb,UAAU,CAAEc,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,MAAM,IACrBA,MAAM,CAACC,GAAG,KAAKJ,aAAa,CAACI,GAAG,GAAGJ,aAAa,GAAGG,MACrD,CACF,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXX,MAAM,CAACa,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMd,KAAK,CAAC2B,IAAI,CAAC,+BAA+B,EAAE;QACjEC,IAAI,EAAEpB,UAAU;QAChBqB,MAAM,EAAEnB;MACV,CAAC,CAAC;MACFH,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEQ,QAAQ,CAACE,IAAI,CAAC,CAAC;MACvCP,aAAa,CAAC,EAAE,CAAC;MACjBE,eAAe,CAAC,EAAE,CAAC;;MAEnB;MACAC,MAAM,CAACkB,IAAI,CAAC,qBAAqB,EAAEhB,QAAQ,CAACE,IAAI,CAAC;IACnD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEd,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBhC,OAAA;MACEyB,IAAI,EAAC,MAAM;MACXQ,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAE7B,UAAW;MAClB8B,QAAQ,EAAGC,CAAC,IAAK9B,aAAa,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFhC,OAAA;MACEyB,IAAI,EAAC,MAAM;MACXQ,WAAW,EAAC,eAAe;MAC3BC,KAAK,EAAE3B,YAAa;MACpB4B,QAAQ,EAAGC,CAAC,IAAK5B,eAAe,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACFhC,OAAA;MAAQsC,OAAO,EAAEf,SAAU;MAAAK,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/ChC,OAAA;MAAA4B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBhC,OAAA;MAAA4B,QAAA,EACGzB,OAAO,CAACgB,GAAG,CAAEC,MAAM,iBAClBpB,OAAA;QAAA4B,QAAA,GACGR,MAAM,CAACK,IAAI,EAAC,KAAG,EAACL,MAAM,CAACM,MAAM;MAAA,GADvBN,MAAM,CAACC,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA/EID,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AAiFnB,eAAeA,aAAa;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}